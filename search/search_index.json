{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>This is a template repo for FastAPI web service projects.</p>"},{"location":"#features","title":"\u2728 Features","text":"<ul> <li>FastAPI</li> <li>REST API</li> <li>Web service</li> <li>Microservice</li> <li>Project structure</li> <li>Boilerplate/template</li> <li>Best practices</li> <li>Configuration</li> <li>Tests</li> <li>Build</li> <li>Scripts</li> <li>Examples</li> <li>Documentation</li> <li>CI/CD</li> <li>Docker and docker compose</li> </ul>"},{"location":"#template","title":"\ud83e\udde9 Template","text":"<ul> <li>You can use this template repository as reference to create a new repository with the same structure or clone the repository to start a new project. It will help you to organize your project structure and files. It works out of the box for most REST API service projects.</li> <li>You can customize (remove, modify or add) the files and directories as needed to meet your project requirements.</li> <li>If you want to use the template repository directly, just click the Use this template button and follow the instructions.</li> <li> <p>You can use cookiecutter to generate a new project from cookiecutter branch:</p> <pre><code># Clone the cookiecutter branch:\ngit clone -b cookiecutter https://github.com/bybatkhuu/rest.fastapi-template.git\n\n# Install cookiecutter:\npip install cookiecutter\n\n# Generate a new project from the cookiecutter template:\ncookiecutter -f .\n</code></pre> </li> </ul>"},{"location":"pages/","title":"Pages","text":"<p>All the pages are written in markdown and are located in the <code>docs/pages</code> directory. The pages are automatically generated by the <code>mkdocs</code> tool.</p>"},{"location":"pages/release-notes/","title":"\ud83d\udccc Release Notes","text":""},{"location":"pages/release-notes/#v001-2024-01-01","title":"v0.0.1 (2024-01-01)","text":"<ul> <li>Initial release</li> </ul>"},{"location":"pages/about/","title":"\u2139\ufe0f About","text":"<p>This section contains non-technical information about this project.</p>"},{"location":"pages/about/#pages","title":"Pages","text":"<ul> <li>FAQ</li> <li>Authors</li> <li>Contact</li> <li>License</li> </ul>"},{"location":"pages/about/authors/","title":"\ud83e\uddd9\u200d\u2642\ufe0f Authors","text":"<p>This project is developed by the following authors:</p> <ul> <li>@bybatkhuu - Batkhuu Byambajav</li> </ul>"},{"location":"pages/about/contact/","title":"\ud83d\udcde Contact","text":"<p>You can contact me by email at batkhuu10@gmail.com.</p>"},{"location":"pages/about/faq/","title":"\ud83d\udc4b FAQ","text":"<p>This section contains frequently asked questions about this project.</p>"},{"location":"pages/about/faq/#q1-how-do-i-get-started-with-this-project","title":"Q1: How do I get started with this project?","text":"<p>To get started with this project, follow the instructions in the Getting Started guide.</p>"},{"location":"pages/about/license/","title":"\u00a9\ufe0f License","text":"<p>This project is licensed as the <code>LICENSE.md</code> file for details.</p>"},{"location":"pages/api-docs/","title":"\ud83e\udd13 API Documentation","text":"<p>This section provides information on the API documentation for this project.</p>"},{"location":"pages/api-docs/#pages","title":"Pages","text":"<ul> <li>Error codes</li> </ul>"},{"location":"pages/api-docs/api-reference/","title":"API reference","text":""},{"location":"pages/api-docs/error-codes/","title":"\ud83d\udea8 Error Codes","text":"<p>This document provides a comprehensive list of REST API error codes implemented in the application. Each error code includes details such as its unique code, name, HTTP status code, message, and description. It helps in identifying and debugging issues effectively while interacting with the API.</p>"},{"location":"pages/api-docs/error-codes/#notes","title":"Notes","text":"<ul> <li>Code: A unique identifier for the error.</li> <li>Name: A descriptive name for the error.</li> <li>HTTP Status Code: The corresponding HTTP status code.</li> <li>Message: A short message explaining the error.</li> <li>Description: A detailed explanation of the error.</li> </ul>"},{"location":"pages/api-docs/error-codes/#list-of-error-codes","title":"List of Error Codes","text":"Code Name HTTP Status Code Message Description <code>400_00000</code> BAD_REQUEST 400 Bad Request! The server could not understand the request. <code>401_00000</code> UNAUTHORIZED 401 Unauthorized! Authentication is required and has failed. <code>401_01000</code> TOKEN_EXPIRED 401 Token has expired! Authentication is required and has failed. <code>401_01001</code> TOKEN_INVALID 401 Token is invalid! Authentication is required and has failed. <code>403_00000</code> FORBIDDEN 403 Forbidden! The server refuses to authorize the request. <code>403_00001</code> NOT_VERIFIED 403 Not verified! The server refuses to authorize the request. <code>403_01000</code> TOKEN_NOT_EXPIRED 403 Token has not expired! The server refuses to authorize the request. <code>404_00000</code> NOT_FOUND 404 Not Found! The requested resource could not be found. <code>405_00000</code> METHOD_NOT_ALLOWED 405 Method Not Allowed! The HTTP method is not allowed. <code>406_00000</code> NOT_ACCEPTABLE 406 Not Acceptable! The request is not acceptable. <code>408_00000</code> REQUEST_TIMEOUT 408 Request Timeout! The server timed out waiting for the request. <code>409_00000</code> CONFLICT 409 Conflict! The request could not be processed due to a conflict. <code>413_00000</code> REQUEST_ENTITY_TOO_LARGE 413 Payload Too Large! The request payload is too large. <code>414_00000</code> REQUEST_URI_TOO_LONG 414 URI Too Long! The requested URI is too long. <code>415_00000</code> UNSUPPORTED_MEDIA_TYPE 415 Unsupported Media Type! The request media type is unsupported. <code>422_00000</code> UNPROCESSABLE_ENTITY 422 Unprocessable Entity! The server cannot process the request. <code>423_00000</code> LOCKED 423 Locked! The requested resource is locked. <code>429_00000</code> TOO_MANY_REQUESTS 429 Too Many Requests! The user has sent too many requests. <code>500_00000</code> INTERNAL_SERVER_ERROR 500 Internal Server Error! A generic server error occurred. <code>500_10000</code> DB_ERROR 500 Internal Server Error! A database error occurred. <code>500_10001</code> DB_PK_ERROR 500 Internal Server Error! A database primary key error occurred. <code>500_10002</code> DB_UQ_ERROR 500 Internal Server Error! A database unique key error occurred. <code>500_20000</code> SMTP_ERROR 500 Internal Server Error! An SMTP-related error occurred. <code>503_00000</code> SERVICE_UNAVAILABLE 503 Service Unavailable! The server is currently unavailable. <code>503_10000</code> DB_CONNECT_ERROR 503 Service Unavailable! Failed to connect to the database. <code>503_20000</code> SMTP_CONNECT_ERROR 503 Service Unavailable! Failed to connect to the SMTP server."},{"location":"pages/blog/","title":"\u270f\ufe0f Blog","text":"<p>This is the blog page. It will list all the blog posts.</p>"},{"location":"pages/blog/2024/01/01/post-1/","title":"Post 1","text":"<p>Lorem ipsum odor amet, consectetuer adipiscing elit. Mus aptent habitant ornare scelerisque vulputate ridiculus. Justo lectus massa magna duis urna. Dui elit mi potenti duis placerat efficitur dui pretium velit. Nisl cubilia fringilla eros magnis torquent? Hac proin dis ligula at sagittis sed justo volutpat facilisis. Sem netus volutpat urna cras maximus ridiculus leo. Ad vivamus tortor luctus ac ac. Consectetur nulla aptent eleifend euismod sem aliquet auctor. Nisl sem porta platea tincidunt elit tellus lacus ligula tortor. Sagittis nascetur potenti ultrices euismod, aliquet non aenean. Convallis urna gravida quisque odio cras himenaeos odio tristique. Nibh bibendum tempor leo mi ante etiam. Euismod dis praesent natoque auctor dignissim enim condimentum. Et sapien consectetur habitasse, dignissim at eleifend. Fusce laoreet efficitur sem suscipit platea tortor purus cursus magnis.</p>","tags":["Tag-1"]},{"location":"pages/dev/","title":"\ud83d\udcbb Development","text":"<p>This section provides information on how to develop or contribute to this project.</p>"},{"location":"pages/dev/#pages","title":"Pages","text":"<ul> <li>Test</li> <li>Build</li> <li>Docs</li> <li>CI/CD</li> <li>Scripts<ul> <li>base.sh</li> <li>clean.sh</li> <li>get-version.sh</li> <li>test.sh</li> <li>bump-version.sh</li> <li>build.sh</li> <li>changelog.sh</li> <li>docs.sh</li> </ul> </li> <li>File Structure</li> <li>Sitemap</li> <li>Related Projects</li> <li>Roadmap</li> <li>Contributing</li> </ul>"},{"location":"pages/dev/build/","title":"\ud83d\udc33 Build and publish docker image","text":""},{"location":"pages/dev/build/#prerequisites","title":"Prerequisites","text":"<ul> <li>Install Docker and Docker Compose.</li> </ul>"},{"location":"pages/dev/build/#build-and-push-image","title":"Build and push image","text":"<p>A. [RECOMMENDED] Run <code>build.sh</code> script to build images:</p> <pre><code># Run build script:\n./scripts/build.sh\n\n# -p=PLATFORM, --platform=PLATFORM          Build image type [amd64 | arm64]. Default is current platform.\n# -u, --push-images                         Enable pushing built images to Docker Registry.\n# -c, --clean-images                        Enable clearning leftover images.\n# -x, --cross-compile                       Enable cross compiling.\n# -b=BASE_IMAGE, --base-image=BASE_IMAGE    Base image name. Default is \"ubuntu:22.04\".\n# -g=REGISTRY, --registry=REGISTRY          Docker image registry (docker registry and username). Default is \"bybatkhuu\".\n# -r=REPO, --repo=REPO                      Docker image repository. Default is \"rest.fastapi-template\".\n# -v=VERSION, --version=VERSION             Docker image version. Default read from \"./src/api/__version__.py\" file.\n# -s=SUBTAG, --subtag=SUBTAG                Docker image subtag. Default is \"\".\n\n\n# For example:\n./scripts/build.sh -p=arm64 -u -c\n\n# Or:\n./scripts/build.sh -x\n\n# Or:\n./scripts/build.sh -p=arm64 -b=ubuntu:22.04 -n=bybatkhuu -r=rest.fastapi-template -v=1.0.0 -s=-arm64 -u -c\n</code></pre> <p>B. Docker build command:</p> <pre><code># Build image:\ndocker build \\\n    [IMG_ARGS] \\\n    --progress plain \\\n    --platform [PLATFORM] \\\n    -t $[IMG_FULLNAME] \\\n    .\n\n# For example:\ndocker build \\\n    --progress plain \\\n    -t bybatkhuu/rest.fastapi-template:latest \\\n    .\n\n# Push image to Docker Registry:\ndocker push [IMG_FULLNAME]\n# For example:\ndocker push bybatkhuu/rest.fastapi-template:latest\n</code></pre> <p>C. Docker buildx command (cross-compile):</p> <pre><code># Create new builder:\ndocker buildx create --driver docker-container --bootstrap --use --name new_builder\n\n# Build images and push to Docker Registry:\ndocker buildx build \\\n    [IMG_ARGS] \\\n    --progress plain \\\n    --platform linux/amd64,linux/arm64 \\\n    --cache-from=type=registry,ref=[IMG_NAME]:cache-latest \\\n    --cache-to=type=registry,ref=[IMG_NAME]:cache-latest,mode=max \\\n    -t [IMG_FULLNAME] \\\n    --push \\\n    .\n\n# For example:\ndocker buildx build \\\n    --progress plain \\\n    --platform linux/amd64,linux/arm64 \\\n    --cache-from=type=registry,ref=bybatkhuu/rest.fastapi-template:cache-latest \\\n    --cache-to=type=registry,ref=bybatkhuu/rest.fastapi-template:cache-latest,mode=max \\\n    -t bybatkhuu/rest.fastapi-template:latest \\\n    --push \\\n    .\n\n# Remove builder:\ndocker buildx rm -f new_builder\n</code></pre> <p>D. Docker compose build command:</p> <pre><code># Build image:\ndocker compose build\n\n# Push image to Docker Registry:\ndocker compose push\n</code></pre> <p>\ud83d\udc4d</p>"},{"location":"pages/dev/build/#references","title":"References","text":"<ul> <li>https://docs.docker.com/engine/reference/commandline/build</li> <li>https://docs.docker.com/get-started/02_our_app</li> <li>https://docs.docker.com/develop/develop-images/dockerfile_best-practices</li> <li>https://docs.docker.com/language/python/build-images</li> <li>https://codefresh.io/docker-tutorial/build-docker-image-dockerfiles</li> <li>https://learnk8s.io/blog/smaller-docker-images</li> <li>https://phoenixnap.com/kb/docker-image-size</li> <li>https://semaphoreci.com/blog/2016/12/13/lightweight-docker-images-in-5-steps.html</li> <li>https://medium.com/@gdiener/how-to-build-a-smaller-docker-image-76779e18d48a</li> </ul>"},{"location":"pages/dev/cicd/","title":"\ud83d\udc77 CI/CD","text":"<p>This section provides information on how to setup and configure CI/CD pipelines for this project.</p>"},{"location":"pages/dev/cicd/#github-actions","title":"GitHub Actions","text":""},{"location":"pages/dev/cicd/#references","title":"References","text":"<ul> <li>GitHub Actions Documentation</li> <li>GitHub Actions Marketplace</li> </ul>"},{"location":"pages/dev/contributing/","title":"\ud83e\udd1d Contributing","text":"<p>This project is encourages contributions!</p>"},{"location":"pages/dev/docs/","title":"\ud83d\udcdd Docs","text":"<p>To build the documentation, run the following command:</p> <pre><code># Install python documentation dependencies:\npip install -r ./requirements/requirements.docs.txt\n\n# Serve documentation locally (for development):\n./scripts/docs.sh\n# Or:\nmkdocs serve\n\n# Or build documentation:\n./scripts/docs.sh -b\n# Or:\nmkdocs build\n</code></pre>"},{"location":"pages/dev/docs/#mkdocs-material","title":"MkDocs Material","text":""},{"location":"pages/dev/docs/#installation","title":"Installation","text":"<pre><code>pip install -U mkdocs-material mkdocs-render-swagger-plugin\n</code></pre>"},{"location":"pages/dev/docs/#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"pages/dev/docs/#docs-layout","title":"Docs layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"pages/dev/docs/#references","title":"References","text":"<ul> <li>MkDocs Documentation</li> <li>MkDocs Material Documentation</li> <li>MkDocs Swagger Renderer Plugin</li> <li>mkdocstrings Documentation</li> </ul>"},{"location":"pages/dev/file-structure/","title":"\ud83d\udcc2 File Structure","text":"<pre><code>project/\n\u251c\u2500\u2500 .github/                 # GitHub specific files\n\u2502   \u251c\u2500\u2500 workflows/               # GitHub Actions workflows\n\u2502   \u2514\u2500\u2500 release.yml              # Categories and labels for release notes\n\u251c\u2500\u2500 .vscode/                 # VSCode specific files\n\u2502   \u251c\u2500\u2500 extensions.json          # Recommended extensions for the workspace\n\u2502   \u2514\u2500\u2500 settings.json            # Common VSCode settings for the workspace\n\u251c\u2500\u2500 docs/                    # Documentation of this project\n\u2502   \u251c\u2500\u2500 assets/                  # Assets for documentation (images, videos, styles, etc.)\n\u2502   \u251c\u2500\u2500 diagrams/                # Diagrams related to the project\n\u2502   \u251c\u2500\u2500 pages/                   # Markdown pages for documentation\n\u2502   \u251c\u2500\u2500 references/              # References related to the project\n\u2502   \u251c\u2500\u2500 reports/                 # Reports generated from results\n\u2502   \u2514\u2500\u2500 README.md                # Documentation README\n\u251c\u2500\u2500 examples/                # Example source codes\n\u251c\u2500\u2500 requirements/            # Dependency requirements for different environments\n\u251c\u2500\u2500 scripts/                 # Helpful scripts\n\u251c\u2500\u2500 src/                     # Main codebase directory\n\u2502   \u251c\u2500\u2500 api/                        # Main API directory\n\u2502   \u2502   \u251c\u2500\u2500 __init__.py             # Initialize the api module\n\u2502   \u2502   \u251c\u2500\u2500 __main__.py             # Main entry point for the api\n\u2502   \u2502   \u251c\u2500\u2500 __version__.py          # Version of the api\n\u2502   \u2502   \u251c\u2500\u2500 config.py               # Main configuration\n\u2502   \u2502   \u251c\u2500\u2500 exception.py            # All exception handlers will be registered here\n\u2502   \u2502   \u251c\u2500\u2500 lifespan.py             # Lifespan events (startup, shutdown)\n\u2502   \u2502   \u251c\u2500\u2500 logger.py               # Initialize the logger\n\u2502   \u2502   \u251c\u2500\u2500 middleware.py           # All middlewares will be registered here\n\u2502   \u2502   \u251c\u2500\u2500 router.py               # All routers will be registered here\n\u2502   \u2502   \u2514\u2500\u2500 server.py               # Main FastAPI application\n\u2502   \u251c\u2500\u2500 assets/                  # Assets for the codebase\n\u2502   \u251c\u2500\u2500 configs/                 # Configuration files\n\u2502   \u251c\u2500\u2500 locale/                  # Localization files\n\u2502   \u251c\u2500\u2500 __init__.py              # Initialize the codebase\n\u2502   \u2514\u2500\u2500 main.py                  # Main entry point\n\u251c\u2500\u2500 templates/               # Template files\n\u251c\u2500\u2500 tests/                   # Tests for the project\n\u2502   \u251c\u2500\u2500 __init__.py          # Initialize the test module\n\u2502   \u251c\u2500\u2500 conftest.py          # Presets for pytest (e.g. fixtures, plugins, pre/post test hooks, etc...)\n\u2502   \u251c\u2500\u2500 test_main.py         # Test case files\n\u2502   \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 volumes/                 # Persistent storage volumes\n\u251c\u2500\u2500 .dockerignore            # Docker ignore file\n\u251c\u2500\u2500 .editorconfig            # Editor configuration\n\u251c\u2500\u2500 .env.example             # Example environment variables file\n\u251c\u2500\u2500 .gitignore               # Git ignore file\n\u251c\u2500\u2500 .markdownlint.json       # Markdown linting rules\n\u251c\u2500\u2500 CHANGELOG.md             # Project change log\n\u251c\u2500\u2500 compose.sh               # Docker compose script\n\u251c\u2500\u2500 compose.yml              # Docker compose configuration\n\u251c\u2500\u2500 Dockerfile               # Docker image definition\n\u251c\u2500\u2500 environment.yml          # Conda environment file\n\u251c\u2500\u2500 LICENSE.txt              # Project license\n\u251c\u2500\u2500 Makefile                 # Automation commands\n\u251c\u2500\u2500 mkdocs.yml               # MkDocs configuration\n\u251c\u2500\u2500 pm2-process.json.example # PM2 process file example\n\u251c\u2500\u2500 pytest.ini               # Pytest configuration\n\u251c\u2500\u2500 README.md                # Main README\n\u2514\u2500\u2500 requirements.txt         # Python requirements\n</code></pre>"},{"location":"pages/dev/related-projects/","title":"\ud83d\uddc2 Related Projects","text":"<p>This section lists related projects or sub-module projects that are part of this project.</p>"},{"location":"pages/dev/roadmap/","title":"\ud83d\udee4 Roadmap","text":"<p>This project is still in its early stages of development.</p> <p>The following is a list of features that are planned for future releases:</p>"},{"location":"pages/dev/sitemap/","title":"\ud83d\uddfa\ufe0f Sitemap","text":"<ul> <li>Home</li> <li>Getting Started<ul> <li>Prerequisites</li> <li>Installation</li> <li>Quick start</li> <li>Configuration</li> <li>Examples</li> </ul> </li> <li>API Documentation<ul> <li>API Reference</li> <li>Error codes</li> </ul> </li> <li>Development<ul> <li>Test</li> <li>Build</li> <li>Docs</li> <li>CI/CD</li> <li>Scripts<ul> <li>base.sh</li> <li>clean.sh</li> <li>get-version.sh</li> <li>test.sh</li> <li>bump-version.sh</li> <li>build.sh</li> <li>changelog.sh</li> <li>docs.sh</li> </ul> </li> <li>File structure</li> <li>Sitemap</li> <li>Related projects</li> <li>Roadmap</li> <li>Contributing</li> </ul> </li> <li>Research<ul> <li>Reports</li> <li>Benchmarks</li> <li>References</li> </ul> </li> <li>Release notes</li> <li>Blog</li> <li>About<ul> <li>FAQ</li> <li>Authors</li> <li>Contact</li> <li>License</li> </ul> </li> </ul>"},{"location":"pages/dev/test/","title":"\ud83e\uddea Test","text":"<p>To run tests, run the following command:</p> <pre><code># Install python test dependencies:\npip install -r ./requirements/requirements.test.txt\n\n# Run tests:\n./scripts/test.sh -l -v -c\n# Or:\npython -m pytest -sv -o log_cli=true\n</code></pre>"},{"location":"pages/dev/test/#pytest","title":"Pytest","text":"<pre><code># Install pytest:\npip install -U pytest pytest-cov pytest-xdist pytest-benchmark\n\n# Run tests:\npython -m pytest\n\n# Pytest help:\npython -m pytest --help\n</code></pre>"},{"location":"pages/dev/test/#references","title":"References","text":"<ul> <li>Pytest Documentation</li> <li>Pytest Getting Started</li> <li>Pytest Fixtures</li> <li>Blogs:<ul> <li>https://docs.pytest.org/en/latest/goodpractices.html</li> <li>https://emimartin.me/pytest_best_practices</li> <li>https://esaezgil.com/post/unittesting_pitfalls</li> <li>https://pytest-with-eric.com/mocking/pytest-common-mocking-problems</li> </ul> </li> </ul>"},{"location":"pages/dev/scripts/","title":"\ud83d\udd28 Scripts","text":"<p>This document provides an overview and usage instructions for the following scripts in this project:</p> <ul> <li><code>base.sh</code></li> <li><code>clean.sh</code></li> <li><code>get-version.sh</code></li> <li><code>test.sh</code></li> <li><code>bump-version.sh</code></li> <li><code>build.sh</code></li> <li><code>changelog.sh</code></li> <li><code>docs.sh</code></li> </ul> <p>All the scripts are located in the <code>scripts</code> directory:</p> <pre><code>scripts/\n\u251c\u2500\u2500 base.sh\n\u251c\u2500\u2500 build.sh\n\u251c\u2500\u2500 bump-version.sh\n\u251c\u2500\u2500 changelog.sh\n\u251c\u2500\u2500 clean.sh\n\u251c\u2500\u2500 docs.sh\n\u251c\u2500\u2500 get-version.sh\n\u2514\u2500\u2500 test.sh\n</code></pre> <p>These scripts are designed to be used in a Linux or macOS environment. They may work in a Windows environment with the appropriate tools installed, but this is not guaranteed.</p>"},{"location":"pages/dev/scripts/1.base/","title":"\ud83c\udfe0 base.sh","text":"<p>This is a base script used to define common utility functions for other scripts in the project.</p> <p>It contains the following key features:</p> <ul> <li>Date format definition: Defines a date format that is used throughout the scripts.</li> <li>Colour codes: Sets up color codes for console logging if the terminal is recognized as an xterm.</li> <li>Logging functions: Includes <code>echoError</code>, <code>echoWarn</code>, <code>echoInfo</code>, and <code>echoOk</code> which log messages to the console with a timestamp, color-coded based on their severity (error, warning, information, success respectively).</li> <li>Existence checks: Implements the <code>exitIfNotExists</code> and <code>exitIfNoGit</code> functions which check for the existence of a file and the Git software, respectively. They log an error and terminate the script with an appropriate exit code if the check fails.</li> </ul>"},{"location":"pages/dev/scripts/2.clean/","title":"\ud83e\uddf9 clean.sh","text":"<p>This script is designed to clean up the build environment by removing artifacts and other temporary or unwanted files and directories. It also includes additional safeguards to ensure Docker is not running before performing certain cleanup operations.</p>"},{"location":"pages/dev/scripts/2.clean/#operations","title":"Operations","text":"<p>The script performs the following operations:</p> <ul> <li>Loading base script: Includes the <code>base.sh</code> script to gain access to utility functions and environment variables.</li> <li>Environment variables: Loads environment variables from a <code>.env</code> file if it exists.</li> <li>Delete system files: Finds and deletes all <code>.DS_Store</code>, <code>.Thumbs.db</code>, and <code>.coverage*</code> files in the project directory and its subdirectories.</li> <li>Delete cache directories: Finds and deletes all <code>__pycache__</code>, <code>.benchmarks</code>, and <code>.pytest_cache</code> directories in the project directory and its subdirectories.</li> <li>Delete logs: Removes directories named <code>logs</code> unless they are part of a <code>.git</code> directory.</li> <li>Delete project directories: Removes the project-related directory specified by the <code>PROJECT_SLUG</code> environment variable (default: <code>rest.fastapi-template</code>).</li> <li>Docker safeguards:<ul> <li>Checks if Docker is installed and running.</li> <li>Stops execution if Docker containers are active.</li> </ul> </li> <li>Extended cleanup (optional): If the <code>--all</code> flag is used, it performs additional cleanup:<ul> <li>Removes Docker containers, volumes, and orphaned containers (if Docker is running).</li> </ul> </li> </ul>"},{"location":"pages/dev/scripts/2.clean/#usage","title":"Usage","text":"<p>To execute the clean script, run the following command:</p> <pre><code>./clean.sh [-a|--all]\n</code></pre>"},{"location":"pages/dev/scripts/2.clean/#examples","title":"Examples","text":"<ul> <li>To clean just non-essential files: <code>./clean.sh</code></li> <li>To clean all files: <code>./clean.sh -a</code></li> </ul> <p>This will clean up the project directory, removing any unnecessary files and directories and ensuring a clean environment for a fresh build.</p>"},{"location":"pages/dev/scripts/3.get-version/","title":"\ud83d\udd0d get-version.sh","text":"<p>This script retrieves the current version of the application from a specified version file. If the file is not found or is invalid, it provides a fallback version based on the current date.</p>"},{"location":"pages/dev/scripts/3.get-version/#operations","title":"Operations","text":"<p>The script performs the following steps:</p> <ul> <li>Base setup:<ul> <li>Identifies the script's directory and the project root directory.</li> <li>Loads environment variables from a <code>.env</code> file, if available.</li> </ul> </li> <li>Version file path:<ul> <li>The <code>VERSION_FILE_PATH</code> variable is set from the environment or defaults to <code>./src/api/__version__.py</code> if not provided.</li> </ul> </li> <li>Retrieve version:<ul> <li>If the file specified by <code>VERSION_FILE_PATH</code> exists:<ul> <li>Extracts the version value from the <code>__version__</code> variable in the file using <code>grep</code>, <code>awk</code>, and <code>tr</code>.</li> <li>Exits with status code <code>2</code> if the version cannot be retrieved.</li> </ul> </li> <li>If the file does not exist:<ul> <li>Sets a fallback version in the format <code>0.0.0-YYMMDD</code> (current UTC date).</li> </ul> </li> </ul> </li> <li>Output version:<ul> <li>Prints the retrieved or fallback version to the console.</li> </ul> </li> </ul>"},{"location":"pages/dev/scripts/3.get-version/#usage","title":"Usage","text":"<p>To execute the script, run the following command:</p> <pre><code>./get-version.sh\n</code></pre> <p>This script can be used to conveniently fetch the version. It is used by the <code>bump-version.sh</code> script to retrieve the current version before incrementing it.</p>"},{"location":"pages/dev/scripts/4.test/","title":"\ud83e\uddea test.sh","text":"<p>This script is used to run the pytest tests for the project.</p>"},{"location":"pages/dev/scripts/4.test/#operations","title":"Operations","text":"<p>The script performs the following operations:</p> <ul> <li>Loading base script: Includes the <code>base.sh</code> script to gain access to its utility functions and environment variables.</li> <li>Running pytest: Runs the pytest tests for the project.</li> <li>Logging: If the <code>-l</code> or <code>--log</code> option is provided, the script will log the output of the pytest tests to console.</li> <li>Coverage: If the <code>-c</code> or <code>--cov</code> option is provided, the script will run the pytest tests with coverage.</li> <li>Verbose: If the <code>-v</code> or <code>--verbose</code> option is provided, the script will run the pytest tests with verbose error outputs.</li> </ul>"},{"location":"pages/dev/scripts/4.test/#usage","title":"Usage","text":"<p>To execute the test script, simply run the following command in the terminal:</p> <pre><code>./test.sh [-l|--log] [-c|--cov] [-v|--verbose]\n</code></pre>"},{"location":"pages/dev/scripts/4.test/#examples","title":"Examples","text":"<ul> <li>To test: <code>./test.sh</code></li> <li>To test with logging: <code>./test.sh -l</code></li> <li>To test with coverage: <code>./test.sh -c</code></li> <li>To test with verbose: <code>./test.sh -v</code></li> <li>To test with logging, coverage and verbose: <code>./test.sh -l -c -v</code></li> </ul> <p>This script will run the pytest tests for the project. It can also be used to run the tests with logging, coverage, and verbose options.</p>"},{"location":"pages/dev/scripts/4.test/#references","title":"References","text":"<ul> <li>https://docs.pytest.org</li> </ul>"},{"location":"pages/dev/scripts/5.bump-version/","title":"\ud83c\udff7 bump-version.sh","text":"<p>This script automates the process of managing project versioning. It allows you to increment the major, minor, or patch part of the version according to Semantic Versioning principles. Additionally, it provides options for committing changes, tagging the repository, and pushing updates to a remote Git repository.</p>"},{"location":"pages/dev/scripts/5.bump-version/#operations","title":"Operations","text":"<p>The script performs the following tasks:</p> <ul> <li>Base initialization:<ul> <li>Determines the script and project root directories.</li> <li>Sources the <code>base.sh</code> script for utilities and loads environment variables from a <code>.env</code> file if available.</li> </ul> </li> <li>Variable setup:<ul> <li>Uses the <code>VERSION_FILE_PATH</code> variable to locate the version file (default: <code>./src/api/__version__.py</code>).</li> <li>Defines flags for version bump type, commit, tag, and push operations.</li> </ul> </li> <li>Parse input arguments:<ul> <li><code>-b=*, --bump-type=*</code> specifies the type of version bump:<ul> <li>major, minor, or patch.</li> </ul> </li> <li><code>-c, --commit</code>: Commits the updated version file.</li> <li><code>-t, --tag</code>: Creates a new Git tag for the updated version.</li> <li><code>-p, --push</code>: Pushes the changes and the tag to the remote Git repository.</li> </ul> </li> <li>Validate input:<ul> <li>Ensures a valid bump type is provided.</li> <li>Verifies the existence of a Git repository if commit/tag/push flags are used.</li> </ul> </li> <li>Version management:<ul> <li>Retrieves the current version using the <code>get-version.sh</code> script.</li> <li>Splits the version into its components (major, minor, patch) and increments the appropriate part based on the bump type.</li> <li>Updates the version file with the new version.</li> </ul> </li> <li>Git operations (Optional):<ul> <li>If the <code>-c</code> flag is used, commits the changes.</li> <li>If the <code>-t</code> flag is used, creates a Git tag for the new version (avoids duplicates).</li> <li>If the <code>-p</code> flag is used, pushes the changes and tag to the remote repository.</li> </ul> </li> </ul>"},{"location":"pages/dev/scripts/5.bump-version/#usage","title":"Usage","text":"<p>To execute the script, use the following command:</p> <pre><code>./bump-version.sh -b=&lt;bump_type&gt; [options]\n</code></pre> <p>Replace <code>&lt;bump_type&gt;</code> with either <code>major</code>, <code>minor</code>, or <code>patch</code> to indicate which part of the version to increment. The <code>-p</code> or <code>--push-tag</code> flag tells the script to commit the changes and push the tag to the Git repository.</p>"},{"location":"pages/dev/scripts/5.bump-version/#examples","title":"Examples","text":"<p>To bump the <code>minor</code> version and push the new tag, run:</p> <pre><code>./bump-version.sh -b=minor -p\n</code></pre> <p>This script streamlines the versioning process, reducing the chances of errors and ensuring consistency in versioning.</p>"},{"location":"pages/dev/scripts/5.bump-version/#references","title":"References","text":"<ul> <li>https://semver.org</li> </ul>"},{"location":"pages/dev/scripts/6.build/","title":"\ud83c\udfd7\ufe0f build.sh","text":"<p>This script automates the process of building, pushing, and cleaning Docker images for your project. It supports cross-compilation for multiple platforms, registry management, and advanced configuration options.</p>"},{"location":"pages/dev/scripts/6.build/#operations","title":"Operations","text":"<ul> <li> <p>Initialization:</p> <ul> <li>Sets up project and script paths.</li> <li>Loads environment variables from a <code>.env</code> file if available.</li> <li>Ensures Docker is installed and running.</li> </ul> </li> <li> <p>Flexible configuration:</p> <ul> <li>Allows customization of the image registry, repository, version, and platform through flags or environment variables.</li> </ul> </li> <li> <p>Build process:</p> <ul> <li>Builds Docker images for the specified platform.</li> <li>Supports cross-compilation for <code>amd64</code> and <code>arm64</code> platforms using Docker Buildx.</li> </ul> </li> <li> <p>Push process (optional):</p> <ul> <li>Pushes built images to the specified container registry.</li> </ul> </li> <li> <p>Clean-Up (optional):</p> <ul> <li>Cleans up dangling images and optionally removes built images after pushing.</li> </ul> </li> <li> <p>Advanced features:</p> <ul> <li>Supports specifying a base image, custom tags, and additional build arguments.</li> </ul> </li> </ul>"},{"location":"pages/dev/scripts/6.build/#usage","title":"Usage","text":"<p>To execute the script, use the following command:</p> <pre><code>./build.sh [options]\n</code></pre>"},{"location":"pages/dev/scripts/6.build/#examples","title":"Examples","text":"<pre><code># Run build script:\n./scripts/build.sh\n\n# -p=PLATFORM, --platform=PLATFORM          Build image type [amd64 | arm64]. Default is current platform.\n# -u, --push-images                         Enable pushing built images to Docker Registry.\n# -c, --clean-images                        Enable clearning leftover images.\n# -x, --cross-compile                       Enable cross compiling.\n# -b=BASE_IMAGE, --base-image=BASE_IMAGE    Base image name. Default is \"ubuntu:22.04\".\n# -g=REGISTRY, --registry=REGISTRY          Docker image registry (docker registry and username). Default is \"bybatkhuu\".\n# -r=REPO, --repo=REPO                      Docker image repository. Default is \"rest.fastapi-template\".\n# -v=VERSION, --version=VERSION             Docker image version. Default read from \"./src/api/__version__.py\" file.\n# -s=SUBTAG, --subtag=SUBTAG                Docker image subtag. Default is \"\".\n\n\n# For example:\n./scripts/build.sh -p=arm64 -u -c\n\n# Or:\n./scripts/build.sh -x\n\n# Or:\n./scripts/build.sh -p=arm64 -b=ubuntu:22.04 -n=bybatkhuu -r=rest.fastapi-template -v=1.0.0 -s=-arm64 -u -c\n</code></pre>"},{"location":"pages/dev/scripts/7.changelog/","title":"\ud83d\udccc changelog.sh","text":"<p>This script automates the generation and updating of a <code>CHANGELOG.md</code> file using release information fetched from GitHub. It facilitates updating the changelog based on the latest release, and optionally commits and pushes the changes to the Git repository if specified.</p>"},{"location":"pages/dev/scripts/7.changelog/#operations","title":"Operations","text":"<ul> <li>Load base script: Sources the <code>base.sh</code> script from the <code>scripts</code> directory to leverage utility functions.</li> <li>Load environment variables: Loads environment variables from a <code>.env</code> file if it exists in the project root, which may override default values.</li> <li>GitHub CLI check: Ensures that the GitHub CLI (<code>gh</code>) is installed and authenticated; if not, it prompts the user to log in.</li> <li>Variables Setup: <code>CHANGELOG_FILE_PATH</code> specifies the path of the changelog file, defaulting to <code>CHANGELOG.md</code>.</li> <li>Input Parsing:<ul> <li>Flags:<ul> <li><code>-c</code> or <code>--commit</code>: Indicates whether to commit the changelog updates.</li> <li><code>-p</code> or <code>--push</code>: Indicates whether to push the changelog updates after committing.</li> </ul> </li> </ul> </li> <li>Changelog Update:<ul> <li>Release Tag and Notes: Fetches the latest release tag and release notes using <code>gh release view</code>.</li> <li>File Update: Adds or updates the changelog header, appending a new section for the latest release with its tag, release date, and notes.</li> <li>File Commit and Push (optional):<ul> <li>Commits the changelog updates to the Git repository if <code>-c</code> is provided.</li> <li>Pushes the changes if <code>-p</code> is also provided.</li> </ul> </li> </ul> </li> </ul>"},{"location":"pages/dev/scripts/7.changelog/#usage","title":"Usage","text":"<p>To execute <code>changelog.sh</code>, run:</p> <pre><code>./changelog.sh -c -p\n</code></pre>"},{"location":"pages/dev/scripts/8.docs/","title":"\ud83d\udcdd docs.sh","text":"<p>This script is used to manage the documentation for the project, providing options to either serve a local documentation server or build the documentation as static HTML files.</p>"},{"location":"pages/dev/scripts/8.docs/#operations","title":"Operations","text":"<ul> <li>Loading base script: Includes the <code>base.sh</code> script to gain access to its utility functions and environment variables.</li> <li>Serving documentation: If no flags are set, runs <code>mkdocs serve</code> to start a local documentation server for live preview.</li> <li>Building documentation: If the <code>-b</code> or <code>--build</code> flag is set, the script builds the documentation as static HTML files using <code>mkdocs build</code>, placing the output in the <code>site</code> directory.</li> <li>Publishing documentation: If the <code>-p</code> or <code>--publish</code> flag is set, the script can be extended to publish the documentation to GitHub Pages.</li> </ul>"},{"location":"pages/dev/scripts/8.docs/#usage","title":"Usage","text":"<p>To execute the documentation script, use the following command in the terminal:</p> <pre><code>./docs.sh [-b|--build] [-p|--publish]\n</code></pre>"},{"location":"pages/dev/scripts/8.docs/#examples","title":"Examples","text":"<ul> <li>To serve the documentation: <code>./docs.sh</code></li> <li>To build the documentation: <code>./docs.sh -b</code></li> <li>To publish the documentation: <code>./docs.sh -p</code></li> </ul>"},{"location":"pages/getting-started/","title":"\ud83d\udc24 Getting Started","text":"<p>This section will guide you through the process of setting up the library in your project.</p> <p>For a quick start, follow the steps below.</p>"},{"location":"pages/getting-started/#pages","title":"Pages","text":"<ul> <li>Prerequisites</li> <li>Installation</li> <li>Quick Start</li> <li>Configuration</li> <li>Examples</li> </ul>"},{"location":"pages/getting-started/configuration/","title":"\u2699\ufe0f Configuration","text":""},{"location":"pages/getting-started/configuration/#environment-variables","title":"\ud83c\udf0e Environment Variables","text":"<p><code>.env.example</code>:</p> <pre><code>## --- Environment variable --- ##\nENV=LOCAL\nDEBUG=false\n# TZ=Asia/Seoul\n\n\n## -- API configs -- ##\nFT_API_PORT=8000\nFT_API_LOGS_DIR=\"/var/log/rest.fastapi-template\"\nFT_API_DATA_DIR=\"/var/lib/rest.fastapi-template\"\n\n# FT_API_VERSION=\"1\"\n# FT_API_PREFIX=\"/api/v{api_version}\"\n# FT_API_DOCS_ENABLED=true\n# FT_API_DOCS_OPENAPI_URL=\"{api_prefix}/openapi.json\"\n# FT_API_DOCS_DOCS_URL=\"{api_prefix}/docs\"\n# FT_API_DOCS_REDOC_URL=\"{api_prefix}/redoc\"\n</code></pre>"},{"location":"pages/getting-started/configuration/#command-arguments","title":"\ud83d\udd27 Command arguments","text":"<p>You can customize the command arguments to debug or run the service with different commands.</p> <p><code>compose.override.yml</code>:</p> <pre><code>    command: [\"/bin/bash\"]\n    command: [\"-b\", \"pwd &amp;&amp; ls -al &amp;&amp; /bin/bash\"]\n    command: [\"-b\", \"python -u -m api\"]\n    command: [\"-b\", \"uvicorn main:app --host=0.0.0.0 --port=${FT_API_PORT:-8000} --no-access-log --no-server-header --proxy-headers --forwarded-allow-ips='*'\"]\n</code></pre>"},{"location":"pages/getting-started/examples/","title":"\ud83d\udeb8 Examples","text":""},{"location":"pages/getting-started/examples/#cli","title":"CLI","text":"<p>Send request to the server using <code>curl</code> and parse the response using <code>jq</code>:</p> <pre><code>curl -s http://localhost:8000/api/v1/ping | jq\n</code></pre>"},{"location":"pages/getting-started/examples/#simple","title":"Simple","text":"<p>Using python <code>requests</code> library to send request to the server:</p> <p><code>examples/simple/main.py</code>:</p> <pre><code>## Standard libraries\nimport sys\nimport logging\nimport pprint\n\n## Third-party libraries\nimport requests\n\n\nlogger = logging.getLogger(__name__)\n\n\nif __name__ == \"__main__\":\n    logging.basicConfig(\n        stream=sys.stdout,\n        level=logging.INFO,\n        datefmt=\"%Y-%m-%d %H:%M:%S %z\",\n        format=\"[%(asctime)s | %(levelname)s | %(filename)s:%(lineno)d]: %(message)s\",\n    )\n\n    _base_url = \"http://localhost:8000\"\n    _api_prefix = \"/api/v1\"\n    _endpoint = \"/ping\"\n    _method = \"GET\"\n\n    _url = f\"{_base_url}{_api_prefix}{_endpoint}\"\n    _payload = {}\n    _headers = {\"Accept\": \"application/json\"}\n\n    logger.info(\"Sending request...\")\n    response = requests.request(\n        method=_method, url=_url, headers=_headers, data=_payload\n    )\n    logger.info(\"Done!\\n\")\n\n    logging.info(f\"\\n{pprint.pformat(response.json())}\")\n</code></pre>"},{"location":"pages/getting-started/examples/#async","title":"Async","text":"<p>Using python <code>aiohttp</code> library to send request to the server:</p> <p><code>examples/async/main.py</code>:</p> <pre><code>## Standard libraries\nimport sys\nimport logging\nimport pprint\nimport asyncio\nfrom typing import Dict, Any\n\n## Third-party libraries\nimport aiohttp\n\n\nlogger = logging.getLogger(__name__)\n\n\nasync def main() -&gt; None:\n    logging.basicConfig(\n        stream=sys.stdout,\n        level=logging.INFO,\n        datefmt=\"%Y-%m-%d %H:%M:%S %z\",\n        format=\"[%(asctime)s | %(levelname)s | %(filename)s:%(lineno)d]: %(message)s\",\n    )\n\n    _base_url = \"http://localhost:8000\"\n    _api_prefix = \"/api/v1\"\n    _endpoint = \"/ping\"\n    _method = \"GET\"\n\n    _url = f\"{_base_url}{_api_prefix}{_endpoint}\"\n    _payload = {}\n    _headers = {\"Accept\": \"application/json\"}\n\n    logger.info(\"Sending request...\")\n    _result_dict: Dict[str, Any] = {}\n    async with aiohttp.ClientSession() as _http_session:\n        async with _http_session.request(\n            method=_method, url=_url, headers=_headers, json=_payload\n        ) as _response:\n            _result_dict = await _response.json()\n    logger.info(\"Done!\\n\")\n\n    logging.info(f\"\\n{pprint.pformat(_result_dict)}\")\n\n\nif __name__ == \"__main__\":\n    asyncio.run(main())\n</code></pre>"},{"location":"pages/getting-started/installation/","title":"\ud83d\udee0 Installation","text":""},{"location":"pages/getting-started/installation/#1-download-or-clone-the-repository","title":"1. \ud83d\udce5 Download or clone the repository","text":"<p>1.1. Prepare projects directory (if not exists):</p> <pre><code># Create projects directory:\nmkdir -pv ~/workspaces/projects\n\n# Enter into projects directory:\ncd ~/workspaces/projects\n</code></pre> <p>1.2. Follow one of the below options [A], [B] or [C]:</p> <p>OPTION A. Clone the repository:</p> <pre><code>git clone https://github.com/bybatkhuu/rest.fastapi-template.git &amp;&amp; \\\n    cd rest.fastapi-template\n</code></pre> <p>OPTION B. Clone the repository (for DEVELOPMENT: git + ssh key):</p> <pre><code>git clone git@github.com:bybatkhuu/rest.fastapi-template.git &amp;&amp; \\\n    cd rest.fastapi-template\n</code></pre> <p>OPTION C. Download source code:</p> <ol> <li>Download archived zip or tar.gz file from releases.</li> <li>Extract it into the projects directory.</li> <li>Enter into the project directory.</li> </ol>"},{"location":"pages/getting-started/installation/#2-install-dependencies","title":"2. \ud83d\udce6 Install dependencies","text":"<p>[!TIP] Skip this step, if you're going to use docker runtime</p> <pre><code>pip install -r ./requirements.txt\n\n# For DEVELOPMENT:\npip install -r ./requirements/requirements.dev.txt\n</code></pre>"},{"location":"pages/getting-started/prerequisites/","title":"\ud83d\udea7 Prerequisites","text":"<p>[RECOMMENDED] For docker runtime:</p> <ul> <li>Install docker and docker compose<ul> <li>Docker image: bybatkhuu/rest.fastapi-template</li> </ul> </li> </ul> <p>For standalone runtime:</p> <ul> <li>Install Python (&gt;= v3.9) and pip (&gt;= 23):<ul> <li>[RECOMMENDED]  Miniconda (v3)</li> <li>[arm64/aarch64]  Miniforge (v3)</li> <li>[Python virutal environment]  venv</li> </ul> </li> </ul> <p>[OPTIONAL] For DEVELOPMENT environment:</p> <ul> <li>Install git</li> <li>Setup an SSH key (video tutorial)</li> </ul>"},{"location":"pages/getting-started/quick-start/","title":"\ud83c\udfc3 Quick Start","text":""},{"location":"pages/getting-started/quick-start/#1-configure-environment-variables","title":"1. \ud83c\udf0e Configure environment variables","text":"<p>[!NOTE] Please, check environment variables section for more details.</p>"},{"location":"pages/getting-started/quick-start/#option-a-recommended-for-docker-runtime-5a","title":"OPTION A. [RECOMMENDED] For docker runtime [5.A]","text":"<pre><code># Copy '.env.example' file to '.env' file:\ncp -v ./.env.example ./.env\n\n# Edit environment variables to fit in your environment:\nnano ./.env\n</code></pre>"},{"location":"pages/getting-started/quick-start/#option-b-for-standalone-runtime-5b-5f","title":"OPTION B. For standalone runtime [5.B ~ 5.F]","text":"<pre><code># Copy '.env.example' file to '.env' file:\ncp -v ./.env.example ./src/.env\n\n# Edit environment variables to fit in your environment:\nnano ./src/.env\n</code></pre>"},{"location":"pages/getting-started/quick-start/#2-start-the-server","title":"2. \ud83c\udfc1 Start the server","text":"<p>[!NOTE] Follow the one of below instructions based on your environment [A, B, C, D, E, F]:</p>"},{"location":"pages/getting-started/quick-start/#docker-runtime","title":"Docker runtime","text":"<p>OPTION A. [RECOMMENDED] Run with docker compose:</p> <pre><code>## 1. Configure 'compose.override.yml' file.\n\n# Copy 'compose.override.[ENV].yml' file to 'compose.override.yml' file:\ncp -v ./templates/compose/compose.override.[ENV].yml ./compose.override.yml\n# For example, DEVELOPMENT environment:\ncp -v ./templates/compose/compose.override.dev.yml ./compose.override.yml\n# For example, STATGING or PRODUCTION environment:\ncp -v ./templates/compose/compose.override.prod.yml ./compose.override.yml\n\n# Edit 'compose.override.yml' file to fit in your environment:\nnano ./compose.override.yml\n\n\n## 2. Check docker compose configuration is valid:\n./compose.sh validate\n# Or:\ndocker compose config\n\n\n## 3. Start docker compose:\n./compose.sh start -l\n# Or:\ndocker compose up -d --remove-orphans --force-recreate &amp;&amp; \\\n    docker compose logs -f --tail 100\n</code></pre>"},{"location":"pages/getting-started/quick-start/#standalone-runtime-pm2","title":"Standalone runtime (PM2)","text":"<p>OPTION B. Run with PM2:</p> <p>[!IMPORTANT] Before running, need to install PM2:</p> <pre><code>## 1. Configure PM2 configuration file.\n\n# Copy example PM2 configuration file:\ncp -v ./pm2-process.json.example ./pm2-process.json\n\n# Edit PM2 configuration file to fit in your environment:\nnano ./pm2-process.json\n\n\n## 2. Start PM2 process:\npm2 start ./pm2-process.json &amp;&amp; \\\n    pm2 logs --lines 50 ft\n</code></pre>"},{"location":"pages/getting-started/quick-start/#standalone-runtime-python","title":"Standalone runtime (Python)","text":"<p>OPTION C. Run server as python script:</p> <pre><code>cd src\npython -u ./main.py\n</code></pre> <p>OPTION D. Run server as python module:</p> <pre><code>python -u -m src.api\n\n# Or:\ncd src\npython -u -m api\n</code></pre> <p>OPTION E. Run with uvicorn cli:</p> <pre><code>uvicorn src.main:app --host=[BIND_HOST] --port=[PORT] --no-access-log --no-server-header --proxy-headers --forwarded-allow-ips=\"*\"\n# For example:\nuvicorn src.main:app --host=\"0.0.0.0\" --port=8000 --no-access-log --no-server-header --proxy-headers --forwarded-allow-ips=\"*\"\n\n\n# Or:\ncd src\nuvicorn main:app --host=\"0.0.0.0\" --port=8000 --no-access-log --no-server-header --proxy-headers --forwarded-allow-ips=\"*\"\n\n# For DEVELOPMENT:\nuvicorn main:app --host=\"0.0.0.0\" --port=8000 --no-access-log --no-server-header --proxy-headers --forwarded-allow-ips=\"*\" --reload --reload-include=\"*.yml\" --reload-include=\".env\"\n</code></pre> <p>OPTION F. Run with fastapi cli:</p> <pre><code>fastpi run src --host=[BIND_HOST] --port=[PORT]\n# For example:\nfastapi run src --port=8000\n\n# For DEVELOPMENT:\nfastapi dev src --host=\"0.0.0.0\" --port=8000\n\n\n# Or:\ncd src\nfastapi run --port=8000\n\n# For DEVELOPMENT:\nfastapi dev --host=\"0.0.0.0\" --port=8000\n</code></pre>"},{"location":"pages/getting-started/quick-start/#3-check-server-is-running","title":"3. \u2705 Check server is running","text":"<p>Check with CLI (curl):</p> <pre><code># Send a ping request with 'curl' to REST API server and parse JSON response with 'jq':\ncurl -s http://localhost:8000/api/v1/ping | jq\n</code></pre> <p>Check with web browser:</p> <ul> <li>Health check: http://localhost:8000/api/v1/health</li> <li>Swagger: http://localhost:8000/docs</li> <li>Redoc: http://localhost:8000/redoc</li> <li>OpenAPI JSON: http://localhost:8000/openapi.json</li> </ul>"},{"location":"pages/getting-started/quick-start/#4-stop-the-server","title":"4. \ud83d\uded1 Stop the server","text":"<p>Docker runtime:</p> <pre><code># Stop docker compose:\n./compose.sh stop\n# Or:\ndocker compose down --remove-orphans\n</code></pre> <p>Standalone runtime (Only for PM2):</p> <pre><code>pm2 stop ./pm2-process.json &amp;&amp; \\\n    pm2 flush &amp;&amp; \\\n    pm2 delete ./pm2-process.json\n</code></pre> <p>\ud83d\udc4d</p>"},{"location":"pages/research/","title":"\ud83d\udd2c Research","text":"<p>This section contains research papers, articles, result reports, and benchmarks related to this project.</p>"},{"location":"pages/research/#pages","title":"Pages","text":"<ul> <li>Reports</li> <li>Benchmarks</li> <li>References</li> </ul>"},{"location":"pages/research/benchmarks/","title":"\ud83d\udcca Benchmarks","text":"<p>This section contains benchmark results of this project.</p>"},{"location":"pages/research/references/","title":"\ud83d\udcd1 References","text":"<p>This section contains references to research papers, articles, and other resources related to this project.</p>"},{"location":"pages/research/reports/","title":"\ud83d\udcc8 Reports","text":"<p>This section contains result reports related to this project.</p>"},{"location":"pages/blog/archive/2024/01/","title":"2024/01","text":""},{"location":"pages/blog/category/category-1/","title":"Category-1","text":""}]}